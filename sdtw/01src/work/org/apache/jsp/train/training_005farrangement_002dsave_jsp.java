/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.65
 * Generated at: 2017-04-07 08:59:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.train;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.util.ArrayList;
import com.xietong.software.sdtw.db.BaseUserCode;
import com.xietong.software.sdtw.db.TrainingParticipate;
import com.xietong.software.util.ParamUtils;
import com.xietong.software.common.HtmlTool;
import com.xietong.software.util.Tool;
import com.xietong.software.base.Power;
import com.xietong.software.common.UserInfo;

public final class training_005farrangement_002dsave_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


private synchronized int save(TrainingParticipate v ,HttpServletRequest request,BaseUserCode user){
	int ProjectId = ParamUtils.getIntParameter(request,"ProjectId",-1);
	int Id = ParamUtils.getIntParameter(request,"Id",-1);
	String HomeWork = ParamUtils.getParameter(request,"HomeWork","");
	String CheckReport = ParamUtils.getParameter(request,"CheckReport","");

	int num = 0;
	List cdt = new ArrayList();
	List list = new ArrayList();
	cdt.add("ProjectId="+ProjectId);
	cdt.add("Sname="+user.getId());
	list = v.query(cdt);
	if (list.size()>0) {
		v = (TrainingParticipate)list.get(0);
	}
	v.setSno(user.getName());
	v.setSname(user.getId()+"");
	v.setProjectId(ProjectId);
	v.setHomeWork(HomeWork);
	v.setCheckReport(CheckReport);
	
	if (list.size()>0) {
		num = -2;
	} else {
		num = v.insert();
	}
	return num;
}
private synchronized int save(TrainingParticipate v ,HttpServletRequest request){
	int Id = ParamUtils.getIntParameter(request,"Id",-1);
	String HomeWork = ParamUtils.getParameter(request,"HomeWork","");
	String CheckReport = ParamUtils.getParameter(request,"CheckReport","");
	String AddFileList = ParamUtils.getParameter(request,"AddFileList","");
	String WorkFileList = ParamUtils.getParameter(request,"WorkFileList","");
	v= v.getById(Id);
	v.setHomeWork(HomeWork);
	v.setCheckReport(CheckReport);
	v.setAddFileList(AddFileList);
	v.setWorkFileList(WorkFileList);
	int num = v.update();
	return num;
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

UserInfo ui = Tool.getUserInfo(request);
UserInfo userInfo =null;
if(ui.hasFunPower(Power.USERSTUDENTPOWER)){
	userInfo = ui;
}
if(userInfo == null){
	out.print(HtmlTool.msgBox(request, "请先登录","../index.jsp","../index.jsp"));
	return;
}

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

String cmd = ParamUtils.getParameter(request,"cmd","");
if ("addApply".equals(cmd)) {
	TrainingParticipate v = new TrainingParticipate();
	BaseUserCode user = userInfo.getUserCode();
	int num = save(v,request,user);
	if (num>0) {
		out.print("{\"msg\":\"ok\"}");
	} else if(num==-1){
		out.print("{\"msg\":\"exist\"}");
	} else {
		out.print("{\"msg\":\"no\"}");
	}
	return;
}
if ("uploadFile".equals(cmd)) {
	TrainingParticipate v = new TrainingParticipate();
	int num = save(v,request);
	if (num>0) {
		response.sendRedirect("training_arrangement-list.jsp");
	} 
	return;
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
