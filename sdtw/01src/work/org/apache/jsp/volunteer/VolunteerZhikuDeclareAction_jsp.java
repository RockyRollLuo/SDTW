/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.65
 * Generated at: 2017-04-20 03:47:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.volunteer;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.xietong.software.sdtw.*;
import com.xietong.software.sdtw.db.*;
import com.xietong.software.util.*;
import com.xietong.software.common.*;
import org.apache.commons.logging.*;
import java.io.*;
import java.util.*;
import jxl.*;
import jxl.write.*;
import java.math.BigDecimal;

public final class VolunteerZhikuDeclareAction_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


private static Log log = LogFactory.getLog(VolunteerZhikuDeclare.class);
private static final String[] allFormNames = {"cmd", "page", "idlist", "Id", "ZhikuId", "AddAccount", "Addtime", "Academy", "Checkflag", "Addfilelist", "Name", "Teamname", "Unit", "Type", "Intention", "Arrange", "Process", "Expectresults", "Results", "Cost1", "Cost2", "Cost3", "Cost4", "Cost5", "Cost6", "Totalcost"};
private String[] DicKeys = {"Id", "ZhikuId", "AddAccount", "Addtime", "Academy", "Checkflag", "Addfilelist", "Name", "Teamname", "Unit", "Type", "Intention", "Arrange", "Process", "Expectresults", "Results", "Cost1", "Cost2", "Cost3", "Cost4", "Cost5", "Cost6", "Totalcost"};
private String[][] DicValues = {{"int", "id", "0", "hidden", ""}, {"int", "志库通知的id", "0", "NoticeName", ""}, {"string", "添加账号", "20", "hidden", ""}, {"date", "添加时间", "0", "hidden", ""}, {"string", "学院", "45", "AcademyName", ""}, {"int", "审核标志", "0", "hidden", ""}, {"string", "上传文件", "500", "hidden", ""}, {"string", "项目名称", "45", "text", ""}, {"string", "团队名称", "45", "text", ""}, {"string", "学院", "45", "AcademyName", ""}, {"string", "项目分组", "45", "ZkProjectType", ""}, {"string", "项目活动背景及目的", "500", "hidden", ""}, {"string", "活动流程", "500", "hidden", ""}, {"string", "预期成果", "500", "hidden", ""}, {"string", "预期成果", "500", "hidden", ""}, {"string", "已取得成果", "500", "hidden", ""}, {"string", "（项目情况）交通费", "45", "text", ""}, {"string", "（项目情况）住宿费", "45", "text", ""}, {"string", "（项目情况）其他1", "45", "text", ""}, {"string", "（项目情况）其他2", "45", "text", ""}, {"string", "（项目情况）其他3", "45", "text", ""}, {"string", "（项目情况）其他4", "45", "text", ""}, {"string", "（项目情况）总计", "45", "text", ""}};
private String KeyField = "Id";
private String[] AllFields = {"Id", "ZhikuId", "AddAccount", "Addtime", "Academy", "Checkflag", "Addfilelist", "Name", "Teamname", "Unit", "Type", "Intention", "Arrange", "Process", "Expectresults", "Results", "Cost1", "Cost2", "Cost3", "Cost4", "Cost5", "Cost6", "Totalcost"};
private String[] ListFields = {"ZhikuId", "Academy", "Name", "Teamname", "Unit", "Type", "Cost1", "Cost2", "Cost3", "Cost4", "Cost5", "Cost6", "Totalcost"};
private String[] FormFields = {"ZhikuId", "Academy", "Name", "Teamname", "Unit", "Type", "Intention", "Arrange", "Process", "Expectresults", "Results", "Cost1", "Cost2", "Cost3", "Cost4", "Cost5", "Cost6", "Totalcost"};
private String[] QueryFields = {""};
private String[] HideFields = {"Id"};
private VolunteerZhikuDeclare getByParameterDb(javax.servlet.http.HttpServletRequest request)
{
    UserInfo userInfo = Tool.getUserInfo(request);
    VolunteerZhikuDeclare v = new VolunteerZhikuDeclare();
    v.setId(ParamUtils.getIntParameter(request, "Id", -1));
    String cmd = ParamUtils.getParameter(request, "cmd", "list");
    if (cmd.equals("update")) {
        v = v.getById(v.getId());
        v.paramId(request, "Id");
        v.paramZhikuId(request, "ZhikuId");
        v.paramAddAccount(request, "AddAccount");
        v.paramAddtime(request, "Addtime");
        v.paramAcademy(request, "Academy");
        v.paramCheckflag(request, "Checkflag");
        v.paramAddfilelist(request, "Addfilelist");
        v.paramName(request, "Name");
        v.paramTeamname(request, "Teamname");
        v.paramUnit(request, "Unit");
        v.paramType(request, "Type");
        v.paramIntention(request, "Intention");
        v.paramArrange(request, "Arrange");
        v.paramProcess(request, "Process");
        v.paramExpectresults(request, "Expectresults");
        v.paramResults(request, "Results");
        v.paramCost1(request, "Cost1");
        v.paramCost2(request, "Cost2");
        v.paramCost3(request, "Cost3");
        v.paramCost4(request, "Cost4");
        v.paramCost5(request, "Cost5");
        v.paramCost6(request, "Cost6");
        v.paramTotalcost(request, "Totalcost");
    }
    else {
        v.setId(ParamUtils.getIntParameter(request, "Id", -1));
        v.setZhikuId(ParamUtils.getIntParameter(request, "ZhikuId", -1));
        v.setAddAccount(ParamUtils.getParameter(request, "AddAccount", ""));
        v.setAddtime(ParamUtils.getDateTimeParameter(request, "Addtime", java.sql.Date.valueOf("0001-01-01")));
        v.setAcademy(ParamUtils.getParameter(request, "Academy", ""));
        v.setCheckflag(ParamUtils.getIntParameter(request, "Checkflag", 0));
        v.setAddfilelist(ParamUtils.getParameter(request, "Addfilelist", ""));
        v.setName(ParamUtils.getParameter(request, "Name", ""));
        v.setTeamname(ParamUtils.getParameter(request, "Teamname", ""));
        v.setUnit(ParamUtils.getParameter(request, "Unit", ""));
        v.setType(ParamUtils.getParameter(request, "Type", ""));
        v.setIntention(ParamUtils.getParameter(request, "Intention", ""));
        v.setArrange(ParamUtils.getParameter(request, "Arrange", ""));
        v.setProcess(ParamUtils.getParameter(request, "Process", ""));
        v.setExpectresults(ParamUtils.getParameter(request, "Expectresults", ""));
        v.setResults(ParamUtils.getParameter(request, "Results", ""));
        v.setCost1(ParamUtils.getParameter(request, "Cost1", ""));
        v.setCost2(ParamUtils.getParameter(request, "Cost2", ""));
        v.setCost3(ParamUtils.getParameter(request, "Cost3", ""));
        v.setCost4(ParamUtils.getParameter(request, "Cost4", ""));
        v.setCost5(ParamUtils.getParameter(request, "Cost5", ""));
        v.setCost6(ParamUtils.getParameter(request, "Cost6", ""));
        v.setTotalcost(ParamUtils.getParameter(request, "Totalcost", ""));
    }
    return v;
}
private synchronized void  formInsert1 (VolunteerZhikuDeclare pv){
	pv.insert();
}

private List getListRows(javax.servlet.http.HttpServletRequest request, VolunteerZhikuDeclare pv, List cdt)
{
    UserInfo userInfo = Tool.getUserInfo(request);
    //默认值定义
    Map ZkProjectTypemap = CEditConst.getZkProjectTypeMap(userInfo);
    Map NoticeNamemap = CEditConst.getNoticeNameMap(userInfo);
    Map AcademyNamemap = CEditConst.getAcademyNameMap(userInfo);
    //查询符合条件的资料
    List vs = pv.query(cdt);
    List rows = new ArrayList();
    for (Iterator it = vs.iterator(); it.hasNext();) {
        VolunteerZhikuDeclare v = (VolunteerZhikuDeclare)it.next();
        List row = new ArrayList();
        row.add("" + v.getId());
        row.add((String)NoticeNamemap.get("" + v.getZhikuId()));
        row.add(Tool.jsSpecialChars(v.getAddAccount()));
        row.add(Tool.stringOfDate(v.getAddtime()));
        row.add((String)AcademyNamemap.get("" + v.getAcademy()));
        row.add("" + v.getCheckflag());
        row.add(Tool.jsSpecialChars(v.getAddfilelist()));
        row.add(Tool.jsSpecialChars(v.getName()));
        row.add(Tool.jsSpecialChars(v.getTeamname()));
        row.add((String)AcademyNamemap.get("" + v.getUnit()));
        row.add((String)ZkProjectTypemap.get("" + v.getType()));
        row.add(Tool.jsSpecialChars(v.getIntention()));
        row.add(Tool.jsSpecialChars(v.getArrange()));
        row.add(Tool.jsSpecialChars(v.getProcess()));
        row.add(Tool.jsSpecialChars(v.getExpectresults()));
        row.add(Tool.jsSpecialChars(v.getResults()));
        row.add(Tool.jsSpecialChars(v.getCost1()));
        row.add(Tool.jsSpecialChars(v.getCost2()));
        row.add(Tool.jsSpecialChars(v.getCost3()));
        row.add(Tool.jsSpecialChars(v.getCost4()));
        row.add(Tool.jsSpecialChars(v.getCost5()));
        row.add(Tool.jsSpecialChars(v.getCost6()));
        row.add(Tool.jsSpecialChars(v.getTotalcost()));
        rows.add(row);
    }
    return rows;
}
private void setListData(javax.servlet.http.HttpServletRequest request, VolunteerZhikuDeclare pv, List cdt)
{
    List rows = new ArrayList();
    for (Iterator it = getListRows(request, pv, cdt).iterator(); it.hasNext();) {
        List row = (List)it.next();
        rows.add("[\"" + Tool.join("\",\"", row) + "\"]");
    }
    request.setAttribute("List", rows);
}
private List getListCondition(javax.servlet.http.HttpServletRequest request, VolunteerZhikuDeclare pv, boolean isAll)
{
    UserInfo userInfo = Tool.getUserInfo(request);
    int shownum = ParamUtils.getIntParameter(request, "shownum", userInfo.getDispNum());
    String orderfield = ParamUtils.getParameter(request, "orderfield", "Id");
    String ordertype = ParamUtils.getParameter(request, "ordertype", "desc");
    List cdt = new ArrayList();
    String qval = "";
    List QueryValues = new ArrayList();
    if (!isAll) {
        int currpage = ParamUtils.getIntParameter(request, "page", 1);
        com.xietong.software.common.PageControl pc = new com.xietong.software.common.PageControl(pv.getCount(cdt), currpage, shownum);
        cdt.add("limit " + pc.getOffset() + "," + pc.getShownum());
        request.setAttribute("PageControl", pc);
    }
    String cname = pv.getFieldByProperty(orderfield);
    if (cname.length() != 0) {
        cdt.add("order by " + cname + " " + ordertype);
        log.debug("order by " + cname + " " + ordertype);
    }
    request.setAttribute("queryfields", QueryFields);
    request.setAttribute("queryvalues", QueryValues);
    return cdt;
}
private void setList(javax.servlet.http.HttpServletRequest request)
{
    setList(request, false);
request.setAttribute("hidefields", HideFields);}
private void setList(javax.servlet.http.HttpServletRequest request, boolean isAll)
{
    UserInfo userInfo = Tool.getUserInfo(request);
    VolunteerZhikuDeclare pv = new VolunteerZhikuDeclare();
    setListData(request, pv, getListCondition(request, pv, isAll));
    request.setAttribute("dickeys", DicKeys);
    request.setAttribute("dicvalues", DicValues);
    request.setAttribute("keyfield", KeyField);
    request.setAttribute("allfields", AllFields);
    request.setAttribute("fields", ListFields);
    request.setAttribute("classname", "VolunteerZhikuDeclare");
    request.setAttribute("describe", "山大志库");
}
private void writeExcel(HttpServletRequest request, String filename) {
    UserInfo userInfo = Tool.getUserInfo(request);
    VolunteerZhikuDeclare pv = new VolunteerZhikuDeclare();
    try {
        WorkbookSettings ws = new WorkbookSettings();
        ws.setLocale(new Locale("zh", "CN"));
        WritableWorkbook workbook = Workbook.createWorkbook(new File(filename), ws);
        WritableSheet s1 = workbook.createSheet("Sheet1", 0);
        for (int k = 0; k < DicValues.length; k ++) {
            Label lr = new Label(k, 0, DicValues[k][1]);
            s1.addCell(lr);
        }
        int i = 1;
        List condition = getListCondition(request, pv, true);
        int num = pv.getCount(condition);
        for (int pos = 0; pos < num; pos += 100) {
            List cdt = new ArrayList(condition);
            for (Iterator it = condition.iterator(); it.hasNext();) {
                cdt.add(new String((String)it.next()));
            }
            cdt.add("limit " + pos + ",100");
            for (Iterator rit = getListRows(request, pv, cdt).iterator(); rit.hasNext(); i ++) {
                List row = (List)rit.next();
                int j = 0;
                for (Iterator cit = row.iterator(); cit.hasNext(); j ++) {
                    Label lr = new Label(j, i, (String)cit.next());
                    s1.addCell(lr);
                }
            }
        }
        workbook.write();
        workbook.close();
    }
    catch (IOException e) {
    }
    catch (WriteException e) {
    }
}
private void setForm(javax.servlet.http.HttpServletRequest request, VolunteerZhikuDeclare form)
{
    UserInfo userInfo = Tool.getUserInfo(request);
    //默认值定义
    request.setAttribute("ZkProjectTypeoptions", CEditConst.getZkProjectTypeOptions(userInfo, ""));
    request.setAttribute("NoticeNameoptions", CEditConst.getNoticeNameOptions(userInfo, "-1"));
    request.setAttribute("AcademyNameoptions", CEditConst.getAcademyNameOptions(userInfo, ""));
    request.setAttribute("dickeys", DicKeys);
    request.setAttribute("dicvalues", DicValues);
    request.setAttribute("keyfield", KeyField);
    request.setAttribute("allfields", AllFields);
    request.setAttribute("fields", FormFields);
    request.setAttribute("classname", "VolunteerZhikuDeclare");
    request.setAttribute("describe", "山大志库");
}
private List mkRtn(String cmd, String forward, VolunteerZhikuDeclare form)
{
    List rtn = new ArrayList();
    rtn.add(cmd);
    rtn.add(forward);
    rtn.add(form);
    return rtn;
}
private synchronized void  formInsert (VolunteerZhikuDeclare pv){
	pv.insert();
}
public List main(javax.servlet.http.HttpServletRequest request)
{
    UserInfo userInfo = Tool.getUserInfo(request);
    String cmd = ParamUtils.getParameter(request, "cmd", "list");
    log.debug("cmd=" + cmd);
    VolunteerZhikuDeclare form = getByParameterDb(request);
    if (cmd.equals("list"))
    {
        setList(request);
        return mkRtn("list", "success", form);
    }
    if (cmd.equals("listall"))
    {
        setList(request, true);
        return mkRtn(cmd, "success", form);
    }
    if (cmd.equals("excel"))
    {
        String filename = HeadConst.root_file_path + "/upload/temp/" + userInfo.getName() + ".xls";
        writeExcel(request, filename);
        return mkRtn(cmd, "excel", form);
    }
    if (cmd.equals("create"))
    {
        setForm(request, form);
        return mkRtn("save", "input", form);
    }
    if (cmd.equals("modify"))
    {
        form = form.getById(form.getId());
        setForm(request, form);
        return mkRtn("update", "input", form);
    }
    if (cmd.equals("delete"))
    {
        form.delete(form.getId());
        return mkRtn("list", "list1", form);
    }
    if (cmd.equals("deletelist"))
    {
        String idlist = ParamUtils.getParameter(request, "idlist", "-1");
        List cdt = new ArrayList();
        cdt.add("id in (" + idlist + ")");
        form.deleteByCondition(cdt);
        return mkRtn("list", "list", form);
    }
    if (cmd.equals("save"))
    {
    	formInsert1 (form);
        return mkRtn("list", "list", form);
    }
    if (cmd.equals("save1"))
    {
    	formInsert (form);
    	int  ppid=form.getId();
     	String sids=ParamUtils.getParameter(request, "SId", "-1");
   	 String  [] ssids=Tool.split(",", sids);
   	// String zhiwu="zhiwu";
   	 String gongzuo="";
   	 String dianhua="";
   	VolunteerZhikuTeammember vpm= new VolunteerZhikuTeammember();
   	for(int i=0;i<ssids.length;i++){
   		vpm.setZhikuDeclareId(ppid);
   		 gongzuo=ParamUtils.getParameter(request, "zhiwu"+i, "-1");
   		 System.out.println(gongzuo);
   		 dianhua=ParamUtils.getParameter(request, "phone"+i, "-1");
   		 vpm.setPhone( dianhua);
   		vpm.setDuty(gongzuo);
   		vpm.setSno(ssids[i]);
   		vpm.insert();
   	} 
        return mkRtn("list", "list1", form);
    }
    if (cmd.equals("update"))
    {
        form.update();
        return mkRtn("list", "list", form);
    }
    request.setAttribute("msg", "未规定的cmd:" + cmd);
    return mkRtn("list", "failure", form);
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

response.setHeader("Cache-Control", "no-cache, must-revalidate");
response.setHeader("Pragma", "no-cache");
log.debug("VolunteerZhikuDeclareAction");
int currpage = ParamUtils.getIntParameter(request, "page", 1);
List rtn = null;
UserInfo userInfo = Tool.getUserInfo(request);
if (userInfo==null) {
    rtn = mkRtn("login", "login", null);
}
String tmp = ParamUtils.getParameter(request,"cmd","");
if(tmp.equals("otherattach")){
	 String fileElementId = ParamUtils.getParameter(request,"fileElementId","");
	 Calendar c = Calendar.getInstance();
	CUploadFile cuf = new CUploadFile(fileElementId,new Date().getTime()+"","/main/upload/"+c.get(Calendar.YEAR)+"/"+(c.get(Calendar.MONTH)+1));
	cuf.setlimitSize(1024*1024*5L);
	if(!FileTool.exists(HeadConst.root_file_path+"/main/upload/"+c.get(Calendar.YEAR))){
		FileTool.createDir(HeadConst.root_file_path+"/main/upload/"+c.get(Calendar.YEAR));
	}
	 if(!FileTool.exists(HeadConst.root_file_path+"/main/upload/"+c.get(Calendar.YEAR)+"/"+(c.get(Calendar.MONTH)+1))){
		FileTool.createDir(HeadConst.root_file_path+"/main/upload/"+c.get(Calendar.YEAR)+"/"+(c.get(Calendar.MONTH)+1));
	}  
	 int fl = cuf.save(request);

	 if(fl==-1){//上传失败
	    	try{
	    		out.clear();
				out.print("{error:'上传失败',msg:''}");
	    	}catch(Exception e){
	    		e.printStackTrace();
	    	}
		}else if(fl==0){
			out.clear();
			out.print("{error:'附件大小超过10M不能上传',msg:''}");
		}
	else{//上传成功
		
		try{
			ClientAttach attach = new ClientAttach();
			attach.setDataBase("tuanwei");
			attach.setAttachType(13);
			//attach.setUploadType("application/msword");
			attach.setUploadName(cuf.getRealName());
			attach.setAttachSize(100);
			attach.setUploadDate(new Date());
			
			attach.setGenerateName(cuf.getSavePath()+"/"+cuf.getSaveTotalName());
			attach.setFromClass("VolunteerZhikuDeclareAction.jsp");
			attach.setFromTable("VolunteerZhikuDeclare");
			if(attach.insert()>0){
	
				out.clear();
				out.print("{\"name\":\""+cuf.getRealName()+"\",\"error\":\"\",\"ids\":\""+attach.getId()+"\",\"msg\":\"上传成功\",\"url\":\"/main/upload/"+c.get(Calendar.YEAR)+"/"+(c.get(Calendar.MONTH)+1)+"/"+cuf.getSaveTotalName()+"\"}");
				System.out.println("111111进入文件上传");
   		}else{
   			out.clear();
   			out.print("{error:'上传失败',msg:''}");
   		}
   	}catch(Exception e){
   		e.printStackTrace();
   	}
	}
	return;
}else if(tmp.equals("delAttach")){
	int tmpid = ParamUtils.getIntParameter(request,"did",-1);
	if(tmpid != -1){
		ClientAttach ca = new ClientAttach();
		ca.delete(tmpid);
		out.print("{\"error\":\"\",\"msg\":\"删除成功\"}");
	}
	else{
		out.print("{error:'删除失败',msg:''}");
	}
	return;
}
else {
    rtn = main(request);
}
String cmd = (String)rtn.get(0);
String forwardKey = (String)rtn.get(1);
request.setAttribute("fromBean", rtn.get(2));
Map forwardMap = new HashMap();
forwardMap.put("login", "logon.jsp");
forwardMap.put("list", "VolunteerZhikuDeclareAction.jsp");
forwardMap.put("list1", "volunteer-zhiku-list.jsp");
forwardMap.put("failure", "VolunteerZhikuDeclareForm.jsp");
forwardMap.put("success", "VolunteerZhikuDeclareList.jsp");
forwardMap.put("excel", "/upload/temp/" + userInfo.getName() + ".xls");
forwardMap.put("input", "VolunteerZhikuDeclareForm.jsp");
HttpTool.saveParameters(request, "Ext", allFormNames);
log.debug("cmd=" + cmd + ", forward=" + forwardKey);
if (forwardKey.equals("list")) {
    List paras = HttpTool.getSavedUrlForm(request, "Ext");
    List urls = (List)paras.get(0);
    urls.addAll((List)paras.get(2));
    String url = Tool.join("&", urls);
    out.println("<script>window.location='VolunteerZhikuDeclareAction.jsp?cmd=list&page=" + currpage + ((url.length() == 0) ? "" : "&" + url) + "';</script>");
}
else {
    pageContext.forward((String)forwardMap.get(forwardKey) + "?cmd=" + cmd + "&page=" + currpage);
}

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
